https://photos.app.goo.gl/CcAzh5GEowAxUhCV7

# Server
A server is a hardware or software that provides functionality for other programs or devices, called "clients".

For our usecase, the server will host an installation of our web server (Nginx), application server, codebase, and database.

# Role of a domain name
The domain name serves as a human-readable address for your server. Instead of typing in an IP address (8.8.8.8), users type in www.foobar.com to access our website. The domain name system (DNS) translates domain names to IP addresses.

# www
www is a subdomain. it is mostly used to point to the homepage of a website

# Role of a web server
Nginx is the web server in this infrastructure. Its main role is to accept incoming HTTP requests from clients (browsers), and serve them web pages, which can be static files or dynamic content generated by the application server.

# Role of the application server
The application server hosts and runs the application's codebase. It handles the business logic of the application and interacts with the database to retrieve and store data. It takes the requests forwarded by the Nginx web server, processes them, and sends back responses.

# Role of the database
The database (MySQL) stores all the necessary data for our website, like user profiles, content, settings, etc. The application server queries the database to fetch or store data as per the requests.

# How the server communicates
The server uses the HTTP/HTTPS protocol to communicate with the user's browser.

# Issues with this infrastructure

## Single point of failure (SPOF)
Since all components are on a single server, if any hardware component or essential service fails, the entire website goes down. Every component is an SPOF in this setup

## Downtime and Maintenance
For maintenance purposes, the stack has to be down a lot of times

## Scalability
Traffic more than what the web server can handle will crash the site
